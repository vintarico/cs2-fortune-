datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  steamId   String   @unique
  username  String?
  saldo     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Campos de permiss√µes e planos
  isAdmin   Boolean  @default(false)
  isPremium Boolean  @default(false)
  plan      String   @default("free") // "free", "premium", "vip", "admin"
  
  // üî• NOVOS CAMPOS PARA IA/GPT
  aiModel         String?   @default("gpt-3.5-turbo") // Modelo preferido do usu√°rio
  aiQuota         Int       @default(10000) // Quota mensal de tokens
  aiUsage         Int       @default(0) // Tokens usados no per√≠odo
  aiUsageResetAt  DateTime? // Data de reset da quota
  aiTotalCost     Float     @default(0) // Custo total acumulado em USD
  
  // Flags individuais de acesso
  gpt5Access      Boolean   @default(false) // ‚≠ê Acesso ao GPT-5
  betaAccess      Boolean   @default(false) // Acesso a features beta
  
  transactions Transaction[]
  aiUsageLogs  AIUsageLog[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // "deposito", "retirada", "compra", "venda"
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Case {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  imageUrl    String?
  description String?
  createdAt   DateTime @default(now())
}

model Skin {
  id        Int      @id @default(autoincrement())
  name      String
  rarity    String
  price     Float
  imageUrl  String?
  caseId    Int?
  createdAt DateTime @default(now())
}

// üÜï NOVA TABELA: Log de uso de IA
model AIUsageLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  model      String   // Modelo usado (gpt-3.5-turbo, gpt-4, gpt-5)
  tokensUsed Int      // Tokens consumidos
  cost       Float    // Custo em USD
  endpoint   String?  // Endpoint usado (/api/ai/chat, etc)
  success    Boolean  @default(true)
  timestamp  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId, timestamp])
}

// üÜï NOVA TABELA: Configura√ß√£o de rollout de features
model FeatureRollout {
  id            Int      @id @default(autoincrement())
  featureName   String   @unique // "gpt5", "beta-features", etc
  enabled       Boolean  @default(false)
  rolloutPercent Float   @default(0) // Percentual de usu√°rios com acesso
  allowedUserIds Int[]   // IDs espec√≠ficos com acesso
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
